<?php

/**
 * Implements hook_menu().
 */
function civicrm_newsletter_menu() {
  $items = array();

  $items['admin/config/services/civicrm_newsletter'] = array(
    'title' => 'CiviCRM Advanced Newsletter Management',
    'description' => 'Configure CiviCRM Advanced Newsletter Management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_civicrm_newsletter_config_form'),
    'access arguments' => array('administer civicrm newsletter'),
    'file' => 'civicrm_newsletter.admin.inc',
  );

  $items['civicrm_newsletter/subscribe/%'] = array(
    'title' => 'Subscribe to CiviCRM newsletters',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_civicrm_newsletter_subscription_form', 2),
    'access callback' => '_civicrm_newsletter_access',
    'access arguments' => array('_civicrm_newsletter_subscription_form', 2),
  );
  $items['civicrm_newsletter/preferences/%/%'] = array(
    'title' => 'CiviCRM newsletters preferences',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_civicrm_newsletter_preferences_form', 2, 3),
    'access callback' => '_civicrm_newsletter_access',
    'access arguments' => array('_civicrm_newsletter_preferences_form', 2),
  );
  $items['civicrm_newsletter/request_link/%'] = array(
    'title' => 'Request a link to CiviCRM newsletters preferences',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_civicrm_newsletter_request_form', 2),
    'access callback' => '_civicrm_newsletter_access',
    'access arguments' => array('_civicrm_newsletter_request_form', 2),
  );

  return $items;
}

/**
 * Access callback for this module's page callbacks.
 *
 * @param $callback
 *   The name of the page callback as defined within hook_menu().
 * @param $profile_name
 *   The name of the Advanced Newsletter Management profile.
 *
 * @return bool
 *   Whether the user is granted access to the page callback.
 */
function _civicrm_newsletter_access($callback, $profile_name) {
  switch ($callback) {
    case '_civicrm_newsletter_subscription_form':
      $access = (
        user_access('access civicrm all newsletter subscription forms')
        || user_access('access civicrm newsletter subscription form ' . $profile_name)
      );
      break;
    case '_civicrm_newsletter_preferences_form':
      $access = (
        user_access('access all civicrm newsletter preferences forms')
        || user_access('access civicrm newsletter preferences form ' . $profile_name)
      );
      break;
    case '_civicrm_newsletter_request_form':
      $access = (
        user_access('access all civicrm newsletter request forms')
        || user_access('access civicrm newsletter request form ' . $profile_name)
      );
      break;
    default:
      $access = FALSE;
      break;
  }

  return $access;
}

/**
 * Implements hook_permission().
 */
function civicrm_newsletter_permission() {
  $permissions = array();

  $permissions['administer civicrm newsletter'] = array(
    'title' => t('Administer CiviCRM Advanced Newsletter Management'),
    'description' => t('Allow users to configure the module.')
  );
  $permissions['access civicrm all newsletter subscription forms'] = array(
    'title' => t('Access all newsletter subscription forms'),
    'description' => t('Allow users to access the public newsletter subscription form for any profile.'),
  );
  $permissions['access all civicrm newsletter preferences forms'] = array(
    'title' => t('Access all newsletter preferences forms'),
    'description' => t('Allow users to access the newsletter preferences form for any profile.'),
  );
  $permissions['access all civicrm newsletter request forms'] = array(
    'title' => t('Access all newsletter request forms'),
    'description' => t('Allow users to access the request link form for any profile.'),
  );

  // Per-form permission per profile.
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');
  foreach(_civicrm_newsletter_profile_get() as $profile_name => $profile) {
    $permissions['access civicrm newsletter subscription form ' . $profile_name] = array(
      'title' => t('Access newsletter subscription form with profile ' . $profile_name),
      'description' => t('Allow users to access the public newsletter subscription form with profile ' . $profile_name . '.'),
    );
    $permissions['access civicrm newsletter preferences form ' . $profile_name] = array(
      'title' => t('Access newsletter preferences form with profile ' . $profile_name),
      'description' => t('Allow users to access the newsletter preferences form with profile ' . $profile_name . '.'),
    );
    $permissions['access civicrm newsletter request form ' . $profile_name] = array(
      'title' => t('Access newsletter request form ' . $profile_name),
      'description' => t('Allow users to access the request link form for profile ' . $profile_name . '.'),
    );
  }

  return $permissions;
}

/**
 * Builds the public subscription form.
 */
function _civicrm_newsletter_subscription_form($form, &$form_state, $profile_name) {
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');

  // Retrieve CiviCRM Advanced Newsletter Management extension configuration for
  // given profile.
  if (!$profile = _civicrm_newsletter_profile_get($profile_name)) {
    drupal_not_found();
  }
  else {
    // Set page title according to received configuration.
    if ($profile['form_title']) {
      drupal_set_title($profile['form_title']);
    }

    // Include the Advanced Newsletter Management profile name.
    $form['profile'] = array(
      '#type' => 'value',
      '#value' => $profile_name,
    );

    // Build form according to received configuration:
    // Add contact fields.
    foreach ($profile['contact_fields'] as $contact_field_name => $contact_field) {
      if ($contact_field['active']) {
        $form[$contact_field_name] = array(
          '#type' => _civicrm_newsletter_contact_field_types()[$contact_field['type']],
          '#title' => $contact_field['label'],
          '#description' => $contact_field['description'],
          '#required' => !empty($contact_field['required']),
        );
        if (!empty($contact_field['options'])) {
          $form[$contact_field_name]['#options'] = $contact_field['options'];
          if (empty($contact_field['required'])) {
            $form[$contact_field_name]['#empty_option'] = t('- None -');
          }
        }
      }
    }

    // Add mailing lists selection.
    $form['mailing_lists'] = _civicrm_newsletter_mailing_lists_tree_checkboxes($profile['mailing_lists_tree']);
    $form['mailing_lists']['#title'] = $profile['mailing_lists_label'];
    $form['mailing_lists']['#description'] = $profile['mailing_lists_description'];
    $form['mailing_lists']['#attributes'] = array(
      'class' => array(
        'form-item-mailing-lists',
      ),
    );
    $form['mailing_lists']['#attached'] = array(
      'js' => array(
        drupal_get_path('module', 'civicrm_newsletter') . '/js/civicrm_newsletter.js',
      )
    );

    // Add terms and conditions.
    if (!empty($profile['conditions_public'])) {
      $form['conditions_public'] = array(
        '#type' => 'textarea',
        '#title' => $profile['conditions_public_label'],
        '#description' => $profile['conditions_public_description'],
        '#value' => $profile['conditions_public'],
        '#disabled' => TRUE,
      );
    }

    // Add submit button with configured label, if given.
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => $profile['submit_label'] ?: t('Submit'),
    );
  }

  return $form;
}

/**
 * Processes the submitted public subscription form.
 */
function _civicrm_newsletter_subscription_form_submit($form, &$form_state) {
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');

  // Clean the submitted values from Drupal Form API stuff.
  $params = $form_state;
  form_state_values_clean($params);
  $params = $params['values'];

  // Remove unchecked checkbox values (those that are 0).
  $params['mailing_lists'] = array_filter($params['mailing_lists']);

  // Submit the subscription using CiviMRF.
  $result = _civicrm_newsletter_subscription_submit($params);

  if (!empty($result['is_error'])) {
    // The API call returned an error, rebuild the form and notify the user.
    drupal_set_message(t('Your subscription could not be submitted, please try again later.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  else {
    drupal_set_message(t('Your subscription has been successfully submitted. You will receive an e-mail with a link to a confirmation page. Your subscription will not be active until you confirm it.'));
  }
}

/**
 * Builds the preferences form for a CiviCRM contact.
 */
function _civicrm_newsletter_preferences_form($form, &$form_state, $profile_name, $contact_hash) {
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');

  // Retrieve CiviCRM Advanced Newsletter Management extension configuration for
  // given profile.
  if (!$profile = _civicrm_newsletter_profile_get($profile_name)) {
    drupal_not_found();
  }
  else {
    // Set page title according to received configuration.
    if ($profile['form_title']) {
      drupal_set_title($profile['form_title']);
    }

    // Include the Advanced Newsletter Management profile name.
    $form['profile'] = array(
      '#type' => 'value',
      '#value' => $profile_name,
    );

    // Retrieve subscription status for contact.
    if (!$subscription = civicrm_newsletter_subscription_get($contact_hash)) {
      drupal_set_message(
        t('Could not retrieve the newsletter subscription status. Please request a new confirmation link.'),
        'warning'
      );
      drupal_goto('civicrm_newsletter/request_link/' . $profile_name);
    }
    else {
      // Automatically confirm pending subscriptions.
      $result = _civicrm_newsletter_subscription_autoconfirm(array(
        'contact_id' => $subscription['contact']['id'],
        'contact_hash' => $subscription['contact']['hash'],
      ));
      if (!empty($result['is_error'])) {
        // The API call returned an error, rebuild the form and notify the user.
        drupal_set_message(t('Your confirmation could not be submitted, please try again later.'), 'error');
        $form_state['rebuild'] = TRUE;
      }
      elseif (!empty($result['values'])) {
        drupal_set_message(t('Your confirmation has been successfully submitted. You will receive an e-mail with a summary of your subscriptions.'));
      }

      $form['contact_hash'] = array(
        '#type' => 'value',
        '#value' => $subscription['contact']['hash'],
      );
      $form['contact_id'] = array(
        '#type' => 'value',
        '#value' => $subscription['contact']['id'],
      );

      // Build form according to retrieved configuration:
      // Add contact fields.
      foreach ($profile['contact_fields'] as $contact_field_name => $contact_field) {
        if ($contact_field['active']) {
          $form[$contact_field_name] = array(
            '#type' => _civicrm_newsletter_contact_field_types()[$contact_field['type']],
            '#title' => $contact_field['label'],
            '#description' => $contact_field['description'],
            '#default_value' => $subscription['contact'][$contact_field_name],
            '#required' => !empty($contact_field['required']),
            '#disabled' => TRUE,
          );
          if (!empty($contact_field['options'])) {
            $form[$contact_field_name]['#options'] = $contact_field['options'];
            if (empty($contact_field['required'])) {
              $form[$contact_field_name]['#empty_option'] = t('- None -');
            }
          }
        }
      }

      // Add mailing lists selection.
      $form['mailing_lists'] = _civicrm_newsletter_mailing_lists_tree_checkboxes(
        $profile['mailing_lists_tree'],
        $subscription['subscription_status']
      );
      $form['mailing_lists']['#title'] = $profile['mailing_lists_label'];
      $form['mailing_lists']['#description'] = $profile['mailing_lists_description'];
      $form['mailing_lists']['#attributes'] = array(
        'class' => array(
          'form-item-mailing-lists',
        ),
      );
      $form['mailing_lists']['#attached'] = array(
        'js' => array(
          drupal_get_path('module', 'civicrm_newsletter') . '/js/civicrm_newsletter.js',
        )
      );

      // Add terms and conditions.
      if (!empty($profile['conditions_preferences'])) {
        $form['conditions_preferences'] = array(
          '#type' => 'textarea',
          '#title' => $profile['conditions_preferences_label'],
          '#description' => $profile['conditions_preferences_description'],
          '#value' => $profile['conditions_preferences'],
          '#disabled' => TRUE,
        );
      }

      // Add submit button with configured label, if given.
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => $profile['submit_label'] ?: t('Submit'),
      );
    }
  }

  return $form;
}

/**
 * Processes the submitted preferences form for a CiviCRM contact.
 */
function _civicrm_newsletter_preferences_form_submit($form, &$form_state) {
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');

  // Clean the submitted values from Drupal Form API stuff.
  $params = $form_state;
  form_state_values_clean($params);
  $params = $params['values'];
  $params['mailing_lists'] = array_map(function($value) {
    return ($value ? 'Added' : 'Removed');
  }, $params['mailing_lists']);

  // Submit the subscription using CiviMRF.
  // TODO: Global Opt-out?
  $result = _civicrm_newsletter_subscription_confirm($params);

  if (!empty($result['is_error'])) {
    // The API call returned an error, rebuild the form and notify the user.
    drupal_set_message(t('Your confirmation could not be submitted, please try again later.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  else {
    drupal_set_message(t('Your confirmation has been successfully submitted. You will receive an e-mail with a summary of your subscriptions.'));
  }
}

/**
 * Builds the request link form.
 */
function _civicrm_newsletter_request_form($form, &$form_state, $profile_name)  {
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');

  // Retrieve CiviCRM Advanced Newsletter Management extension configuration for
  // given profile.
  if (!$profile = _civicrm_newsletter_profile_get($profile_name)) {
    drupal_not_found();
  }
  else {
    // Set page title according to received configuration.
    if ($profile['form_title']) {
      drupal_set_title($profile['form_title']);
    }

    // Include the Advanced Newsletter Management profile name.
    $form['profile'] = array(
      '#type' => 'value',
      '#value' => $profile_name,
    );

    // Build form according to received configuration:
    // Add contact fields.
    foreach ($profile['contact_fields'] as $contact_field_name => $contact_field) {
      if ($contact_field['active']) {
        $form[$contact_field_name] = array(
          '#type' => _civicrm_newsletter_contact_field_types()[$contact_field['type']],
          '#title' => $contact_field['label'],
          '#description' => $contact_field['description'],
          '#required' => !empty($contact_field['required']),
        );
        if (!empty($contact_field['options'])) {
          $form[$contact_field_name]['#options'] = $contact_field['options'];
          if (empty($contact_field['required'])) {
            $form[$contact_field_name]['#empty_option'] = t('- None -');
          }
        }
      }
    }

    // Add submit button with configured label, if given.
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }

  return $form;
}

/**
 * Processes the submitted request link form.
 */
function _civicrm_newsletter_request_form_submit($form, &$form_state) {
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');

  // Clean the submitted values from Drupal Form API stuff.
  $params = $form_state;
  form_state_values_clean($params);
  $params = $params['values'];

  // Submit the subscription using CiviMRF.
  $result = _civicrm_newsletter_subscription_request($params);

  if (!empty($result['is_error'])) {
    // The API call returned an error, rebuild the form and notify the user.
    drupal_set_message(t('Your request could not be submitted, please try again later.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  else {
    drupal_set_message(t('Your request has been successfully submitted. You will receive an e-mail with a link to a confirmation page.'));
  }
}

/**
 * Returns a mapping of CiviCRM HTML types to Drupal Form API types.
 *
 * @return array
 */
function _civicrm_newsletter_contact_field_types() {
  return array(
    'Select' => 'select',
    'Multi-Select' => 'checkboxes',
    'Text' => 'textfield',
    'Textarea' => 'textarea',
  );
}

/**
 * Transforms a mailing lists tree from a retrieved profile configuration into
 * nested fieldset elements with checkboxes.
 *
 * @param array $tree
 *
 * @param array $default_values
 *
 * @return array
 */
function _civicrm_newsletter_mailing_lists_tree_checkboxes($tree, $default_values = array()) {
  $element = array(
    '#type' => 'fieldset',
  );

  foreach ($tree as $group_id => $group_definition) {
    $checkbox = array(
      '#type' => 'checkbox',
      '#title' => $group_definition['label'],
      '#description' => $group_definition['description'],
      '#default_value' => (array_key_exists($group_id, $default_values)) ? 1 : 0,
    );
    if (!empty($group_definition['children'])) {
      $element[$group_id . '_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => $group_definition['label'],
        '#description' => $group_definition['description'],
      );
      $element[$group_id . '_fieldset']['mailing_lists[' . $group_id . ']'] = $checkbox;
      $element[$group_id . '_fieldset']['children'] = _civicrm_newsletter_mailing_lists_tree_checkboxes($group_definition['children'], $default_values);
    }
    else {
      $element['mailing_lists[' . $group_id . ']'] = $checkbox;
    }
  }

  return $element;
}
