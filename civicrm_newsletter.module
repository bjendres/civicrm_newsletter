<?php

/**
 * Implements hook_menu().
 */
function civicrm_newsletter_menu() {
  $items = array();

  $items['admin/config/services/civicrm_newsletter'] = array(
    'title' => 'CiviCRM Advanced Newsletter Management',
    'description' => 'Configure CiviCRM Advanced Newsletter Management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_civicrm_newsletter_config_form'),
    'access arguments' => array('administer civicrm newsletter'),
    'file' => 'civicrm_newsletter.admin.inc',
  );

  $items['civicrm_newsletter/subscribe'] = array(
    'title' => 'Subscribe to CiviCRM newsletters',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_civicrm_newsletter_subscription_form', 2),
    'access arguments' => array('access civicrm newsletter subscription form'),
  );
  $items['civicrm_newsletter/preferences/%'] = array(
    'title' => 'CiviCRM newsletters preferences',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_civicrm_newsletter_preferences_form', 2, 3),
    'access arguments' => array('access civicrm newsletter preferences form'),
  );
  $items['civicrm_newsletter/request_link'] = array(
    'title' => 'Request a link to CiviCRM newsletters preferences',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_civicrm_newsletter_request_form'),
    'access arguments' => array('access civicrm newsletter request form'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function civicrm_newsletter_permission() {
  $permissions = array();

  $permissions['access civicrm newsletter public form'] = array(
    'title' => t('Access newsletter subscription form'),
    'description' => t('Allow users to access the public newsletter subscription form.'),
  );
  $permissions['access civicrm newsletter preferences form'] = array(
    'title' => t('Access newsletter preferences form'),
    'description' => t('Allow users to access the newsletter preferences form.'),
  );
  $permissions['access civicrm newsletter request form'] = array(
    'title' => t('Access newsletter request form'),
    'description' => t('Allow users to access the request link form.'),
  );

  return $permissions;
}

/**
 * Builds the public subscription form.
 */
function _civicrm_newsletter_subscription_form($form, &$form_state, $profile_name = 'default') {
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');

  // Default parameter may be an empty string when coming from menu router.
  $profile_name = $profile_name ?: 'default';

  // Retrieve CiviCRM Advanced Newsletter Management extension configuration for
  // given profile.
  if (!$profile = _civicrm_newsletter_profile_get($profile_name)) {
    drupal_set_message(
      t('Could not retrieve the newsletter profile. Please try again later.'),
      'error'
    );
  }
  else {
    // Include the Advanced Newsletter Management profile name.
    $form['profile'] = array(
      '#type' => 'value',
      '#value' => $profile_name,
    );

    // Build form according to received configuration:
    // Add contact fields.
    foreach ($profile['contact_fields'] as $contact_field_name => $contact_field) {
      if ($contact_field['active']) {
        $form[$contact_field_name] = array(
          '#type' => 'textfield',
          '#title' => $contact_field['label'],
          '#description' => $contact_field['description'],
        );
      }
    }

    // Add mailing lists selection.
    $form['mailing_lists'] = array(
      '#type' => 'checkboxes',
      '#title' => $profile['mailing_lists_label'],
      '#description' => $profile['mailing_lists_description'],
      '#options' => $profile['mailing_lists'],
    );

    // Add terms and conditions.
    if (!empty($profile['conditions_public'])) {
      $form['conditions_public'] = array(
        '#type' => 'textarea',
        '#title' => $profile['conditions_public_label'],
        '#description' => $profile['conditions_public_description'],
        '#value' => $profile['conditions_public'],
        '#disabled' => TRUE,
      );
    }

    // Add submit button with configured label, if given.
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => $profile['submit_label'] ?: t('Submit'),
    );

    // Set page title according to received configuration.
    if ($profile['form_title']) {
      drupal_set_title($profile['form_title']);
    }
  }

  return $form;
}

/**
 * Processes the submitted public subscription form.
 */
function _civicrm_newsletter_subscription_form_submit($form, &$form_state) {
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');

  // Clean the submitted values from Drupal Form API stuff.
  $params = $form_state;
  form_state_values_clean($params);
  $params = $params['values'];

  // Submit the subscription using CiviMRF.
  $result = _civicrm_newsletter_subscription_submit($params);

  if (!empty($result['is_error'])) {
    // The API call returned an error, rebuild the form and notify the user.
    drupal_set_message(t('Your subscription could not be submitted, please try again later.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  else {
    drupal_set_message(t('Your subscription has been successfully submitted. You will receive an e-mail with a link to a confirmation page. Your subscription will not be active until you confirm it.'));
  }
}

/**
 * Builds the preferences form for a CiviCRM contact.
 */
function _civicrm_newsletter_preferences_form($form, &$form_state, $contact_hash, $profile_name = 'default') {
  module_load_include('inc', 'civicrm_newsletter', 'civicrm_newsletter.cmrf');

  // Default parameter may be an empty string.
  $profile_name = $profile_name ?: 'default';

  // Retrieve CiviCRM Advanced Newsletter Management extension configuration for
  // given profile.
  $profile = _civicrm_newsletter_profile_get($profile_name);

  // Retrieve subscription status for contact.
  $subscription = civicrm_newsletter_subscription_get($contact_hash);

  // Build form according to retrieved configuration:
  // Add contact fields.
  foreach ($profile['contact_fields'] as $contact_field_name => $contact_field) {
    if ($contact_field['active']) {
      $form[$contact_field_name] = array(
        '#type' => 'textfield',
        '#title' => $contact_field['label'],
        '#description' => $contact_field['description'],
        '#default_value' => $subscription['contact'][$contact_field_name],
        '#disabled' => TRUE,
      );
    }
  }

  // Add mailing lists selection.
  $form['mailing_lists'] = array(
    '#type' => 'checkboxes',
    '#title' => $profile['mailing_lists_label'],
    '#description' => $profile['mailing_lists_description'],
    '#options' => $profile['mailing_lists'],
    // Check added and pending groups.
    '#default_value' => array_keys($subscription['subscription_status']),
  );

  // Add terms and conditions.
  if (!empty($profile['conditions_preferences'])) {
    $form['conditions_preferences'] = array(
      '#type' => 'textarea',
      '#title' => $profile['conditions_preferences_label'],
      '#description' => $profile['conditions_preferences_description'],
      '#value' => $profile['conditions_preferences'],
      '#disabled' => TRUE,
    );
  }

  // Add submit button with configured label, if given.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $profile['submit_label'] ?: t('Submit'),
  );

  // Set page title according to received configuration.
  if ($profile['form_title']) {
    drupal_set_title($profile['form_title']);
  }

  return $form;
}

/**
 * Processes the submitted preferences form for a CiviCRM contact.
 */
function _civicrm_newsletter_preferences_form_submit($form, &$form_state) {

}

/**
 * Builds the request link form.
 */
function _civicrm_newsletter_request_form($form, &$form_state)  {
  // TODO: Get configuration (contact fields) from CiviCRM API.
}

/**
 * Processes the submitted request link form.
 */
function _civicrm_newsletter_request_form_submit($form, &$form_state) {

}
